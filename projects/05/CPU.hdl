// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    
	// Determine instructions
	Not(in=instruction[15], out=Ainstruction);
	Not(in=Ainstruction, out=Cinstruction);
	
	And(a=Cinstruction, b=instruction[5], out=ALUtoA);
	Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=outInst);
	
	Or(a=Ainstruction, b=ALUtoA, out=loadA);
	ARegister(in=outInst, load=loadA, out=outRegA);
	
	Mux16(a=outRegA, b=inM, sel=instruction[12], out=AOrInM); // select InM or A Register by a-bit in the instruction
	
	And(a=Cinstruction, b=instruction[4], out=loadD);
	DRegister(in=ALUout, load=loadD, out=outRegD);	// if load D Register
	
	ALU(x=outRegD, y=AOrInM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
		f=instruction[7], no=instruction[6], out=ALUout, zr=ZRout, ng=NGout);
		
	Or16(a=false, b=ALUout, out=outM);
	And(a=Cinstruction, b=instruction[3], out=writeM);
	Or16(a=false, b=outRegA, out[0..14]=addressM);
	
	Or(a=ZRout, b=NGout, out=outle); // flag of ALU output which refers the output is equal or less than 0
	Not(in=outle, out=outgt); // flag of ALU output which refers the output is greater than 0
	Or(a=outgt, b=ZRout, out=outge); // flag of ALU output which refers the output is equal or greater than 0
	Not(in=ZRout, out=notZR); // ALU output is not zero
	
	And(a=instruction[1], b=ZRout, out=jeq);
	And(a=instruction[2], b=NGout, out=jlt);
	And(a=instruction[0], b=outgt, out=jgt);
	Not(in=jeq, out=jne);
	Or(a=jgt, b=jeq, out=jge);
	Or(a=jlt, b=jeq, out=jle);
	
	Or(a=jeq, b=jlt, out=jump01);
	Or(a=jump01, b=jgt, out=checkjump);
	And(a=Cinstruction, b=checkjump, out=loadjmp);
	
	Not(in=loadjmp, out=loadinc);
	
	PC(in=outRegA, inc=loadinc, load=loadjmp, reset=reset, out[0..14]=pc);
}
