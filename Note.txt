
--------------------------------------------------------------------------------------------------------------------------------------------------------------
										Machine Language
- A 16-bit machine consist of:
 + Data memory (RAM): a sequence of 16-bit registers: RAM[0], RAM[1], RAM[2]...
 + Instruction memory (ROM): a sequence of 16-bit registers: RAM[0], RAM[1], RAM[2]...
 + Center processing unit (CPU): perfoms 16-bit instructions
 + Instruction bus/ data bus/ address buses
 
- Data bus connects CPU and data memory
- Instruction bus that moves instructions from Instruction memory to the CPU
- Buses are kind of like highways of 16 lanes moving chunks of 16 bits from one place to another.
- Hack machine language:
	We decided create two categories:
		+ 16-bit A-instructions
		+ 16-bit C-instructions
- Hack program = sequence of instructions written in the Hack machine language.
- Hack machine language recognizes three registers:
	+ D holds a 16-bit value which represents a piece of data.
	+ A holds a 16-bit value which represents either a data value or an address.
	+ M - memory register represents 16-bit RAM register address by A.
	
- C-instruction answers 3 questions:
	+ what to compute
	+ where to computed value
	+ what to do next
	
- Computer always running, there are always many processes running in the background even we don't touch the keyboard
- After run all symbols in assembly code, our program is still running, what if after the last ram assembly call, in a downstream has malicious code.
- The best practice to terminate a program safely, end it with an infinite loop. Ex: let's end the program like: @6
																												 0;JMP
																												 
- Variables that store memory address are called pointer
- Hack pointer logic: whenever we have to access memory using a pointer, we need an instruction A=M (A equals somthing)
- Typical pointer semantics: "set the address register to the contents of some memory register"

- Each row is 16 bit * 32 in 512 pixel SCREEN, that's why if we want to go to next row we must jump into offset of 32 (base address + 32)

- Fill: a program does some basics I/O effect. Implement strategy
	+ Listen to the keyboard
	+ To blacken / clear screen, write code that fills the entire screen memory map with either "white" or "black" pixels
	+ Addressing the memory requires working with pointers

- Technical tips:
	+ Start with pseudo code
	+ Use symbolic variables and labels
	+ Variables: lower-case
	+ Labels: upper-case
	+ Use indentation